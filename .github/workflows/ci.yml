name: CI
on:
  push:
    branches:
      - master
  pull_request:

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  setup:
    name: Prepare workflow data
    runs-on: ubuntu-latest
    timeout-minutes: 2
    permissions:
      # Default
      contents: read
      packages: read
      # Custom, for API cache access
      actions: read
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      config-path: ${{ steps.load-config.outputs.config-path }}
      device-list: ${{ steps.load-config.outputs.device-list }}
      magisk-key: ${{ steps.get-magisk-cache.outputs.magisk-key }}
      img-key-prefix: ${{ steps.get-img-cache.outputs.img-key-prefix }}
      img-hit: ${{ steps.get-img-cache.outputs.img-hit }}
      tox-key-prefix: ${{ steps.get-tox-cache.outputs.tox-key-prefix }}
      tox-hit: ${{ steps.get-tox-cache.outputs.tox-hit }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: python3-strictyaml

      - name: Loading test config
        id: load-config
        shell: python
        run: |
          import json
          import os
          import sys

          sys.path.append(os.environ['GITHUB_WORKSPACE'])
          import tests.config

          config_data = tests.config.load_config()
          devices = [d.data for d in config_data['device']]

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'config-path={tests.config.CONFIG_PATH}\n')
              f.write(f"device-list={json.dumps(devices)}\n")

      - name: Checking for cached tox environments
        id: get-tox-cache
        env:
          tox-key-prefix: tox-${{ hashFiles('tox.ini') }}-
        run: |
          echo "tox-key-prefix=${{ env.tox-key-prefix }}" >> $GITHUB_OUTPUT
          echo "tox-hit=$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            -f 'key=${{ env.tox-key-prefix }}' \
            /repos/${{ github.repository }}/actions/caches)" >> $GITHUB_OUTPUT

      - name: Checking for cached device images
        id: get-img-cache
        env:
          img-key-prefix: img-${{ hashFiles(steps.load-config.outputs.config-path) }}-
        run: |
          echo "img-key-prefix=${{ env.img-key-prefix }}" >> $GITHUB_OUTPUT
          echo "img-hit=$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            -f 'key=${{ env.img-key-prefix }}' \
            /repos/${{ github.repository }}/actions/caches)" >> $GITHUB_OUTPUT

      - name: Checking for cached magisk apk
        id: get-magisk-cache
        env:
          magisk-key: magisk-${{ hashFiles(steps.load-config.outputs.config-path) }}
        run: |
          echo "magisk-key=${{ env.magisk-key }}" >> $GITHUB_OUTPUT
          echo "magisk-hit=$(gh api \
            --method GET \
            -H 'Accept: application/vnd.github+json' \
            -H 'X-GitHub-Api-Version: 2022-11-28' \
            -f 'key=${{ env.magisk-key }}' \
            /repos/${{ github.repository }}/actions/caches)" >> $GITHUB_OUTPUT

      - uses: ./.github/actions/preload-magisk-cache
        if: ${{ fromJSON(steps.get-magisk-cache.outputs.magisk-hit).total_count == 0 }}
        with:
          cache-key: ${{ steps.get-magisk-cache.outputs.magisk-key }}

  preload-img:
    name: Preload device images
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    # Assume that preloading always succesfully cached all images before.
    # If for some reason only some got cached, on the first run, the cache will not be preloaded
    # which will result in some being downloaded multiple times when running the tests.
    if: ${{ fromJSON(needs.setup.outputs.img-hit).total_count == 0 }}
    strategy:
      matrix:
        device: ${{ fromJSON(needs.setup.outputs.device-list) }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: ./.github/actions/preload-img-cache
        with:
          cache-key-prefix: ${{ needs.setup.outputs.img-key-prefix }}
          device: ${{ matrix.device }}

  preload-tox:
    name: Preload tox environments
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 5
    # Assume that preloading always succesfully cached all tox environments before.
    # If for some reason only some got cached, on the first run, the cache will not be preloaded
    # which will result in some being downloaded multiple times when running the tests.
    if: ${{ fromJSON(needs.setup.outputs.tox-hit).total_count == 0 }}
    strategy:
      matrix:
        python: [py39, py310, py311]
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/preload-tox-cache
        with:
          cache-key-prefix: ${{ needs.setup.outputs.tox-key-prefix }}
          python-version: ${{ matrix.python }}

      - name: Generating tox environment
        run: tox -e ${{ matrix.python }} --notest

  tests:
    name: Run test for ${{ matrix.device }} with ${{ matrix.python }}
    runs-on: ubuntu-latest
    needs: [setup, preload-img, preload-tox]
    timeout-minutes: 10
    # Continue on skipped but not on failures or cancels
    if: ${{ always() && ! failure() && ! cancelled() }}
    strategy:
      matrix:
        device: ${{ fromJSON(needs.setup.outputs.device-list) }}
        python: [py39, py310, py311]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: ./.github/actions/preload-magisk-cache
        with:
          cache-key: ${{ needs.setup.outputs.magisk-key }}

      - uses: ./.github/actions/preload-img-cache
        with:
          cache-key-prefix: ${{ needs.setup.outputs.img-key-prefix }}
          device: ${{ matrix.device }}

      - uses: ./.github/actions/preload-tox-cache
        with:
          cache-key-prefix: ${{ needs.setup.outputs.tox-key-prefix }}
          python-version: ${{ matrix.python }}

      # Finally run tests
      - name: Run test for ${{ matrix.device }} with ${{ matrix.python }}
        run: tox -e ${{ matrix.python }} -- --stripped -d ${{ matrix.device }}
